// Copyright (C) 2023 Jasper Parker <j@sperp.dev>
//
// This file is part of Meow.
//
// Meow is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// Meow is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Meow. If not, see <https://www.gnu.org/licenses/>.


#define U0  0
#define U1  1
#define U8  2
#define U16 3
#define U32 4
#define U64 5
#define I8  6
#define I16 7
#define I32 8
#define I64 9
#define F32 10
#define F64 11
#define x86_FP80 12

#define ERROR_TYPE 4000

struct IrType {
    uint base;
    uint pointer_depth;
    uint qualifiers;
};

layout(std430, binding = 6) coherent volatile buffer VregTypes {
	IrType vregTypes[];
};

IrType favoured(IrType lhs, IrType rhs) {
    // TODO: Report all implicit casts (ugh).
    if (lhs.base == 0) return rhs;
    if (rhs.base == 0) return lhs;

    // TODO: Actually write this.

    return lhs;
}

void setStructBit(inout IrType type_) {
    type_.qualifiers |= 0x4;
}

void unsetStructBit(inout IrType type_) {
    type_.qualifiers &= ~0x4;
}

void setUnionBit(inout IrType type_) {
    type_.qualifiers |= 0x2;
}

void unsetUnionBit(inout IrType type_) {
    type_.qualifiers &= ~0x2;
}

void setVolatileBit(inout IrType type_) {
    type_.qualifiers |= 0x8;
}

void unsetVolatileBit(inout IrType type_) {
    type_.qualifiers &= ~0x8;
}

uint sizeOf(IrType type) {
    if (type.pointer_depth > 0) return 8;

    if (type.base == U0) return 0;
    if (type.base == U1) return 1;
    if (type.base == U8) return 1;
    if (type.base == U16) return 2;
    if (type.base == U32) return 4;
    if (type.base == U64) return 8;
    if (type.base == I8) return 1;
    if (type.base == I16) return 2;
    if (type.base == I32) return 4;
    if (type.base == I64) return 8;
    if (type.base == F32) return 4;
    if (type.base == F64) return 8;
    if (type.base == x86_FP80) return 10;

    return 0;
}
